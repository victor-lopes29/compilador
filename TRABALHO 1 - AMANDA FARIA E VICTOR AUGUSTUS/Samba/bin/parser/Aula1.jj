/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Aula1.jj */
/*@egen*/PARSER_BEGIN(Aula1)

package parser;
import recovery.*;

public class Aula1/*@bgen(jjtree)*/implements Aula1TreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTAula1State jjtree = new JJTAula1State();

/*@egen*/
	public static void main (String args []) throws ParseException
	{
		Aula1 parser = new Aula1 (System.in);
		while (true)
		{
			System.out.println("Comecando a contagem: 1,2,3,4");
			System.out.print("Toque o primeiro instrumento: ");

			SimpleNode n = Aula1.main();
			n.dump(" ");

			try
			{
				/*switch (Aula1.main())
				{
					case 0:
					System.out.println("Samba limpo");
					break;
					case 1:
					System.out.println("Instrumentos na salinha");
					break;
					default:
					break;
				}*/
			}
			catch (Exception e)
			{
				System.out.println("Ta ficando sujo o instrumento");
				System.out.println(e.getMessage());
				Aula1.ReInit(System.in);
			}
			catch (Error e)
			{
				System.out.println("Para! Saiu do tempo");
				System.out.println(e.getMessage());
				break;
			}
		}
	}
static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // vari\u00c3\u00a1vel que indica se EOF foi alcan\u00c3\u00a7ado
	
  // o m\u00c3\u00a9todo abaixo consome tokens at\u00c3\u00a9 alcan\u00c3\u00a7ar um que perten\u00c3\u00a7a ao conjunto
  // de sincroniza\u00c3\u00a7\u00c3\u00a3o
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincroniza\u00c3\u00a7\u00c3\u00a3o: " + g);
		
	if (g == null) throw e; // se o conjunto \u00c3\u00a9 null, propaga a exce\u00c3\u00a7\u00c3\u00a3o
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se n\u00c3\u00a3o chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincroniza\u00c3\u00a7\u00c3\u00a3o: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega pr\u00c3\u00b3ximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde n\u00c3\u00a3o deveria.");
  }
}
	
PARSER_END(Aula1)

SKIP :
{
	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN :
{
	< COMECAPROGRAMA : "chamada" >
	| < ABREBLOCO : "iniciosamba" >
	| < TERMINABLOCO : "viradadedois" >
	| < INT : "int" >
	| < FLOAT : "float" >
	| < VARCHAR : "varchar" >
	| < SEPARAR : "," >
	| < FIMINSTRUCAO : "fechabossa" >
	| < IF : "mestre" >
	| < THEN : "toque" >
	| < ELSE : "espere" >
	| < FOR : "contagem" >
	| < TO : "parada" >
	| < WHILE : "bossa" >
	| < DO : "toquebossa" >
	| < IGUAL : "=" >
	| < SOMA : " + " >
	| < SUBTRACAO : " - " >
	| < MULTIPLICACAO : " * " >
	| < DIVISAO : " / " >
}

TOKEN :
{
	< DECIMAL : (< NUMERICO >)+ >
|	< NUMERICO : [ "0"-"9" ] >
|   < IDENTIFICADOR : < LETRA > (<LETRA> | < NUMERICO > ) * >
|   < LETRA   : ["A" - "Z"] | ["a" - "z"] >
}

SimpleNode main() :
{/*@bgen(jjtree) main */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sincronizacao = Follow.main;}
{/*@bgen(jjtree) main */
  try {
/*@egen*/
  try { 
	comecaprograma() abrebloco()
		(comandos())*
	terminabloco()
	{ return jjtn000; }
	}
	catch (ParseException e) {
		consumeUntil(sincronizacao, e, "main");
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ID():
{/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ID */
        try {
/*@egen*/
	< IDENTIFICADOR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void comecaprograma():
{/*@bgen(jjtree) comecaprograma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMECAPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comecaprograma */
  try {
/*@egen*/
  < COMECAPROGRAMA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void abrebloco():
{/*@bgen(jjtree) abrebloco */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) abrebloco */
 try {
/*@egen*/
 < ABREBLOCO >/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void terminabloco():
{/*@bgen(jjtree) terminabloco */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMINABLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) terminabloco */
 try {
/*@egen*/
 < TERMINABLOCO >/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void comandos():
{/*@bgen(jjtree) comandos */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sincronizacao = Follow.comandos;}
{/*@bgen(jjtree) comandos */
        try {
/*@egen*/
  	try {
	declararVariavel() | function() | conta()
	}
	catch (ParseException e) {
		consumeUntil(sincronizacao, e, "comandos");
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void declararVariavel():
{/*@bgen(jjtree) declararVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARARVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sincronizacao = Follow.declaravariavel;}
{/*@bgen(jjtree) declararVariavel */
  try {
/*@egen*/
  try {
	tipoDado() (ID() atribuicao() (separador())? )+fiminstrucao()
	}
	catch (ParseException e) {
		consumeUntil(sincronizacao, e, "declaravariavel");
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void separador():
{/*@bgen(jjtree) separador */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) separador */
 try {
/*@egen*/
 < SEPARAR >/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void fiminstrucao():
{/*@bgen(jjtree) fiminstrucao */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMINSTRUCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fiminstrucao */
 try {
/*@egen*/
 < FIMINSTRUCAO >/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void function() :
{/*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function */
        try {
/*@egen*/
	(ifStatement() | forStatement() | whileStatement())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ifStatement() :
{/*@bgen(jjtree) ifStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sincronizacao = Follow.ifStatement;}
{/*@bgen(jjtree) ifStatement */
  try {
/*@egen*/
  try { 
	cond_if() expressao() cond_then() comandos() cond_else() comandos()
	}
	catch (ParseException e) {
		consumeUntil(sincronizacao, e, "ifStatement");
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void cond_if():
{/*@bgen(jjtree) cond_if */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) cond_if */
        try {
/*@egen*/
	<  IF >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void cond_then():
{/*@bgen(jjtree) cond_then */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND_THEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) cond_then */
        try {
/*@egen*/
	< THEN >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void cond_else():
{/*@bgen(jjtree) cond_else */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) cond_else */
        try {
/*@egen*/
	<ELSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void forStatement() :
{/*@bgen(jjtree) forStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sincronizacao = Follow.forStatement;}
{/*@bgen(jjtree) forStatement */
  try {
/*@egen*/
  try { 
	rep_for() ID() expressao() rep_to() expressao() comandos()
	}
	catch (ParseException e) {
		consumeUntil(sincronizacao, e, "forStatement");
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rep_for():
{/*@bgen(jjtree) rep_for */
  SimpleNode jjtn000 = new SimpleNode(JJTREP_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rep_for */
        try {
/*@egen*/
	< FOR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void rep_to():
{/*@bgen(jjtree) rep_to */
  SimpleNode jjtn000 = new SimpleNode(JJTREP_TO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rep_to */
        try {
/*@egen*/
	<TO>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void whileStatement() :
{/*@bgen(jjtree) whileStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sincronizacao = Follow.whileStatement;}
{/*@bgen(jjtree) whileStatement */
  try {
/*@egen*/
  try { 
	rep_while() expressao() rep_do() comandos()
	}
	catch (ParseException e) {
		consumeUntil(sincronizacao, e, "whileStatement");
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rep_while():
{/*@bgen(jjtree) rep_while */
  SimpleNode jjtn000 = new SimpleNode(JJTREP_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rep_while */
        try {
/*@egen*/
	< WHILE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void rep_do():
{/*@bgen(jjtree) rep_do */
  SimpleNode jjtn000 = new SimpleNode(JJTREP_DO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rep_do */
        try {
/*@egen*/
	< DO >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipoDado():
{/*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoDado */
        try {
/*@egen*/
	tipo_int() | tipo_float() | tipo_varchar()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo_int():
{/*@bgen(jjtree) tipo_int */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_INT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipo_int */
        try {
/*@egen*/
	< INT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo_float():
{/*@bgen(jjtree) tipo_float */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_FLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipo_float */
        try {
/*@egen*/
	< FLOAT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo_varchar():
{/*@bgen(jjtree) tipo_varchar */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_VARCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipo_varchar */
        try {
/*@egen*/
	< VARCHAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void atribuicao() :
{/*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) atribuicao */
        try {
/*@egen*/
	(igual() (letra() | decimal()))?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void op_matematica() :
{/*@bgen(jjtree) op_matematica */
  SimpleNode jjtn000 = new SimpleNode(JJTOP_MATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) op_matematica */
    try {
/*@egen*/
    termo() ( ( soma() | subtracao() ) termo() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void termo() :
{/*@bgen(jjtree) termo */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) termo */
    try {
/*@egen*/
    fator() ( ( multiplicacao() | divisao() ) fator() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void fator() :
{/*@bgen(jjtree) fator */
  SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fator */
    try {
/*@egen*/
    decimal() | ID()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void conta():
{/*@bgen(jjtree) conta */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) conta */
        try {
/*@egen*/
	ID() igual() op_matematica()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void igual():
{/*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) igual */
        try {
/*@egen*/
	< IGUAL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void soma():
{/*@bgen(jjtree) soma */
  SimpleNode jjtn000 = new SimpleNode(JJTSOMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) soma */
  try {
/*@egen*/
  < SOMA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void subtracao():
{/*@bgen(jjtree) subtracao */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBTRACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) subtracao */
  try {
/*@egen*/
  < SUBTRACAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void multiplicacao():
{/*@bgen(jjtree) multiplicacao */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) multiplicacao */
  try {
/*@egen*/
  < MULTIPLICACAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void divisao():
{/*@bgen(jjtree) divisao */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVISAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) divisao */
  try {
/*@egen*/
  < DIVISAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void letra():
{/*@bgen(jjtree) letra */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) letra */
        try {
/*@egen*/
	< LETRA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void decimal():
{/*@bgen(jjtree) decimal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) decimal */
        try {
/*@egen*/
	< DECIMAL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expressao() :
{/*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expressao */
        try {
/*@egen*/
	(comandos())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}